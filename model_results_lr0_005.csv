fc_layers,fc_nodes,dropout,model,confusion_matrix,precision,recall,accuracy,macro_precision,macro_recall,micro_precision,micro_recall
4,200,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=200, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=200, out_features=200, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=200, out_features=4, bias=True)
  )
)","[[276   0   4   0]
 [  0 102  50   0]
 [ 30   0 259   7]
 [ 13   0 167 388]]",[0.86520376 1.         0.53958333 0.98227848],[0.98571429 0.67105263 0.875      0.68309859],0.7908950617283951,0.8467663940253694,0.8037163772106322,0.7908950617283951,0.7908950617283951
3,300,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=300, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=300, out_features=300, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=300, out_features=4, bias=True)
  )
)","[[273   1   6   0]
 [  0  73  79   0]
 [ 92  17 154  33]
 [ 27   9  15 517]]",[0.69642857 0.73       0.60629921 0.94      ],[0.975      0.48026316 0.52027027 0.91021127],0.7847222222222222,0.7431819460067491,0.7214361739426602,0.7847222222222222,0.7847222222222222
1,300,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=300, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=300, out_features=300, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=300, out_features=4, bias=True)
  )
)","[[271   1   8   0]
 [  2  87  63   0]
 [ 41   8 235  12]
 [ 14   2 166 386]]",[0.82621951 0.8877551  0.49788136 0.96984925],[0.96785714 0.57236842 0.79391892 0.67957746],0.7554012345679012,0.7954263040998244,0.7534304869043564,0.7554012345679012,0.7554012345679012
3,100,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=100, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=100, out_features=100, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=100, out_features=4, bias=True)
  )
)","[[259   7  14   0]
 [  0  93  59   0]
 [ 14   8 261  13]
 [  5   0 199 364]]",[0.93165468 0.86111111 0.48968105 0.96551724],[0.925      0.61184211 0.88175676 0.64084507],0.753858024691358,0.8119910198515187,0.7648609831106123,0.753858024691358,0.753858024691358
1,50,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=50, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=50, out_features=50, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=50, out_features=4, bias=True)
  )
)","[[255   1  24   0]
 [  1  88  63   0]
 [ 11   3 274   8]
 [  1   0 229 338]]",[0.95149254 0.95652174 0.46440678 0.97687861],[0.91071429 0.57894737 0.92567568 0.59507042],0.7368827160493827,0.8373249172054118,0.7526019380865563,0.7368827160493827,0.7368827160493827
2,100,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=100, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=100, out_features=100, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=100, out_features=4, bias=True)
  )
)","[[243  19  18   0]
 [  0 152   0   0]
 [  9  26 256   5]
 [  9  12 274 273]]",[0.93103448 0.72727273 0.46715328 0.98201439],[0.86785714 1.         0.86486486 0.4806338 ],0.7129629629629629,0.7768687207980224,0.8033389526347273,0.7129629629629629,0.7129629629629629
3,200,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=200, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=200, out_features=200, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=200, out_features=4, bias=True)
  )
)","[[242   0  38   0]
 [  0  75  77   0]
 [ 19   0 267  10]
 [  8   0 224 336]]",[0.89962825 1.         0.44059406 0.97109827],[0.86428571 0.49342105 0.90202703 0.5915493 ],0.7098765432098766,0.8278301445224996,0.7128207724297421,0.7098765432098766,0.7098765432098766
1,100,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=100, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=100, out_features=100, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=100, out_features=4, bias=True)
  )
)","[[237   0  43   0]
 [  8  61  83   0]
 [ 17   7 264   8]
 [  9   0 206 353]]",[0.87453875 0.89705882 0.44295302 0.97783934],[0.84642857 0.40131579 0.89189189 0.62147887],0.7060185185185185,0.7980974810577874,0.690278781508396,0.7060185185185185,0.7060185185185185
3,50,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=50, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=50, out_features=50, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=50, out_features=4, bias=True)
  )
)","[[225   0  55   0]
 [  0 138  14   0]
 [ 12   2 278   4]
 [  4   5 378 181]]",[0.93360996 0.95172414 0.38344828 0.97837838],[0.80357143 0.90789474 0.93918919 0.31866197],0.6342592592592593,0.8117901876694265,0.7423293316084273,0.6342592592592593,0.6342592592592593
4,100,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=100, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=100, out_features=100, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=100, out_features=4, bias=True)
  )
)","[[175   1 104   0]
 [  0 147   5   0]
 [  1  12 279   4]
 [  6   1 342 219]]",[0.96153846 0.91304348 0.38219178 0.98206278],[0.625      0.96710526 0.94256757 0.38556338],0.6327160493827161,0.8097091252225768,0.7300590527517881,0.6327160493827161,0.6327160493827161
2,300,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=300, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=300, out_features=300, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=300, out_features=4, bias=True)
  )
)","[[129   4 147   0]
 [  0  83  69   0]
 [ 10  11 268   7]
 [ 28   4 198 338]]",[0.77245509 0.81372549 0.39296188 0.97971014],[0.46071429 0.54605263 0.90540541 0.59507042],0.6311728395061729,0.7397131504442047,0.6268106863084624,0.6311728395061729,0.6311728395061729
4,300,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=300, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=300, out_features=300, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(300, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=300, out_features=4, bias=True)
  )
)","[[238   0  42   0]
 [  0  52 100   0]
 [  7   3 284   2]
 [  8   8 317 235]]",[0.94071146 0.82539683 0.38223419 0.99156118],[0.85       0.34210526 0.95945946 0.41373239],0.6242283950617284,0.7849759137538826,0.6413242792458878,0.6242283950617284,0.6242283950617284
4,50,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=50, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=50, out_features=50, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=50, out_features=4, bias=True)
  )
)","[[236   1  43   0]
 [  0 133  19   0]
 [ 49   2 245   0]
 [ 18   0 393 157]]",[0.77887789 0.97794118 0.35       1.        ],[0.84285714 0.875      0.8277027  0.27640845],0.5949074074074074,0.7767047660648417,0.7054920740660178,0.5949074074074074,0.5949074074074074
1,200,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=200, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=200, out_features=200, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=200, out_features=4, bias=True)
  )
)","[[ 70  34 176   0]
 [  0  91  61   0]
 [ 16  13 267   0]
 [  0  12 254 302]]",[0.81395349 0.60666667 0.35224274 1.        ],[0.25       0.59868421 0.90202703 0.53169014],0.5632716049382716,0.6932157247755211,0.5706003445996033,0.5632716049382716,0.5632716049382716
2,200,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=200, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=200, out_features=200, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=200, out_features=4, bias=True)
  )
)","[[212  12  56   0]
 [  0  66  86   0]
 [ 54  23 217   2]
 [ 28  23 287 230]]",[0.72108844 0.53225806 0.33591331 0.99137931],[0.75714286 0.43421053 0.73310811 0.40492958],0.5594135802469136,0.6451597807321512,0.5823477672578858,0.5594135802469136,0.5594135802469136
2,50,0.2,"NeuralNetwork(
  (convolutional_relu_stack): Sequential(
    (0): Conv2d(2, 32, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=valid)
    (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (11): ReLU()
    (12): Flatten(start_dim=1, end_dim=-1)
    (13): Linear(in_features=36864, out_features=50, bias=True)
    (14): Dropout(p=0.2, inplace=False)
    (15): ReLU()
    (16): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack): Sequential(
    (0): Linear(in_features=50, out_features=50, bias=True)
    (1): Dropout(p=0.2, inplace=False)
    (2): ReLU()
    (3): BatchNorm1d(50, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (linear_relu_stack_last): Sequential(
    (0): Linear(in_features=50, out_features=4, bias=True)
  )
)","[[180  13  87   0]
 [  0  52 100   0]
 [ 26   8 262   0]
 [ 10   6 466  86]]",[0.83333333 0.65822785 0.2863388  1.        ],[0.64285714 0.34210526 0.88513514 0.15140845],0.44753086419753085,0.6944749948122018,0.5053764979635995,0.44753086419753085,0.44753086419753085
